/**
 * Generated by orval
 * Do not edit manually.
 */
import type {
  ApiResponse,
  UploadFileBody,
  PetBody,
  Pet,
  FindPetsByStatusParams,
  FindPetsByTagsParams,
  UpdatePetWithFormBody,
} from '../swaggerPetstore.schemas';
import {
  customAxiosInstance,
  ErrorType,
  BodyType,
} from '../../../helpers/axiosService';

export type AwaitedInput<T> = PromiseLike<T> | T;

export type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary uploads an image
 */
export const uploadFile = (petId: number, uploadFileBody: UploadFileBody) => {
  const formData = new FormData();
  if (uploadFileBody.additionalMetadata !== undefined) {
    formData.append('additionalMetadata', uploadFileBody.additionalMetadata);
  }
  if (uploadFileBody.file !== undefined) {
    formData.append('file', uploadFileBody.file);
  }

  return customAxiosInstance<ApiResponse>({
    url: `/pet/${petId}/uploadImage`,
    method: 'post',
    headers: {'Content-Type': 'multipart/form-data'},
    data: formData,
  });
};
/**
 * @summary Add a new pet to the store
 */
export const addPet = (petBody: PetBody) => {
  return customAxiosInstance<unknown>({
    url: `/pet`,
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    data: petBody,
  });
};
/**
 * @summary Update an existing pet
 */
export const updatePet = (petBody: PetBody) => {
  return customAxiosInstance<unknown>({
    url: `/pet`,
    method: 'put',
    headers: {'Content-Type': 'application/json'},
    data: petBody,
  });
};
/**
 * Multiple status values can be provided with comma separated strings
 * @summary Finds Pets by status
 */
export const findPetsByStatus = (
  params?: FindPetsByStatusParams,
  signal?: AbortSignal,
) => {
  return customAxiosInstance<Pet[]>({
    url: `/pet/findByStatus`,
    method: 'get',
    signal,
    params,
  });
};
/**
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @deprecated
 * @summary Finds Pets by tags
 */
export const findPetsByTags = (
  params?: FindPetsByTagsParams,
  signal?: AbortSignal,
) => {
  return customAxiosInstance<Pet[]>({
    url: `/pet/findByTags`,
    method: 'get',
    signal,
    params,
  });
};
/**
 * Returns a single pet
 * @summary Find pet by ID
 */
export const getPetById = (petId: number, signal?: AbortSignal) => {
  return customAxiosInstance<Pet>({
    url: `/pet/${petId}`,
    method: 'get',
    signal,
  });
};
/**
 * @summary Updates a pet in the store with form data
 */
export const updatePetWithForm = (
  petId: number,
  updatePetWithFormBody: UpdatePetWithFormBody,
) => {
  const formUrlEncoded = new URLSearchParams();
  if (updatePetWithFormBody.name !== undefined) {
    formUrlEncoded.append('name', updatePetWithFormBody.name);
  }
  if (updatePetWithFormBody.status !== undefined) {
    formUrlEncoded.append('status', updatePetWithFormBody.status);
  }

  return customAxiosInstance<unknown>({
    url: `/pet/${petId}`,
    method: 'post',
    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
    data: formUrlEncoded,
  });
};
/**
 * @summary Deletes a pet
 */
export const deletePet = (petId: number) => {
  return customAxiosInstance<unknown>({url: `/pet/${petId}`, method: 'delete'});
};
export type UploadFileResult = NonNullable<
  Awaited<ReturnType<typeof uploadFile>>
>;
export type AddPetResult = NonNullable<Awaited<ReturnType<typeof addPet>>>;
export type UpdatePetResult = NonNullable<
  Awaited<ReturnType<typeof updatePet>>
>;
export type FindPetsByStatusResult = NonNullable<
  Awaited<ReturnType<typeof findPetsByStatus>>
>;
export type FindPetsByTagsResult = NonNullable<
  Awaited<ReturnType<typeof findPetsByTags>>
>;
export type GetPetByIdResult = NonNullable<
  Awaited<ReturnType<typeof getPetById>>
>;
export type UpdatePetWithFormResult = NonNullable<
  Awaited<ReturnType<typeof updatePetWithForm>>
>;
export type DeletePetResult = NonNullable<
  Awaited<ReturnType<typeof deletePet>>
>;
