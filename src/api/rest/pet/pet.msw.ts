/**
 * Generated by orval
 * Do not edit manually.
 */
import {rest} from 'msw';
import {faker} from '@faker-js/faker';

export const getUploadFileMock = () => ({
  code: faker.random.arrayElement([faker.datatype.number(), undefined]),
  type: faker.random.arrayElement([faker.random.word(), undefined]),
  message: faker.random.arrayElement([faker.random.word(), undefined]),
});

export const getFindPetsByStatusMock = () =>
  [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({
    id: faker.random.arrayElement([faker.datatype.number(), undefined]),
    category: faker.random.arrayElement([
      {
        id: faker.random.arrayElement([faker.datatype.number(), undefined]),
        name: faker.random.arrayElement([faker.random.word(), undefined]),
      },
      undefined,
    ]),
    name: faker.random.word(),
    photoUrls: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() =>
      faker.random.word(),
    ),
    tags: faker.random.arrayElement([
      [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({
        id: faker.random.arrayElement([faker.datatype.number(), undefined]),
        name: faker.random.arrayElement([faker.random.word(), undefined]),
      })),
      undefined,
    ]),
    status: faker.random.arrayElement([
      faker.random.arrayElement(['available', 'pending', 'sold']),
      undefined,
    ]),
  }));

export const getFindPetsByTagsMock = () =>
  [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({
    id: faker.random.arrayElement([faker.datatype.number(), undefined]),
    category: faker.random.arrayElement([
      {
        id: faker.random.arrayElement([faker.datatype.number(), undefined]),
        name: faker.random.arrayElement([faker.random.word(), undefined]),
      },
      undefined,
    ]),
    name: faker.random.word(),
    photoUrls: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() =>
      faker.random.word(),
    ),
    tags: faker.random.arrayElement([
      [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({
        id: faker.random.arrayElement([faker.datatype.number(), undefined]),
        name: faker.random.arrayElement([faker.random.word(), undefined]),
      })),
      undefined,
    ]),
    status: faker.random.arrayElement([
      faker.random.arrayElement(['available', 'pending', 'sold']),
      undefined,
    ]),
  }));

export const getGetPetByIdMock = () => ({
  id: faker.random.arrayElement([faker.datatype.number(), undefined]),
  category: faker.random.arrayElement([
    {
      id: faker.random.arrayElement([faker.datatype.number(), undefined]),
      name: faker.random.arrayElement([faker.random.word(), undefined]),
    },
    undefined,
  ]),
  name: faker.random.word(),
  photoUrls: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() =>
    faker.random.word(),
  ),
  tags: faker.random.arrayElement([
    [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({
      id: faker.random.arrayElement([faker.datatype.number(), undefined]),
      name: faker.random.arrayElement([faker.random.word(), undefined]),
    })),
    undefined,
  ]),
  status: faker.random.arrayElement([
    faker.random.arrayElement(['available', 'pending', 'sold']),
    undefined,
  ]),
});

export const getPetMSW = () => [
  rest.post('*/pet/:petId/uploadImage', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getUploadFileMock()),
    );
  }),
  rest.post('*/pet', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.put('*/pet', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/pet/findByStatus', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getFindPetsByStatusMock()),
    );
  }),
  rest.get('*/pet/findByTags', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getFindPetsByTagsMock()),
    );
  }),
  rest.get('*/pet/:petId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGetPetByIdMock()),
    );
  }),
  rest.post('*/pet/:petId', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.delete('*/pet/:petId', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
];
