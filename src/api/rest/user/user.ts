/**
 * Generated by orval
 * Do not edit manually.
 */
import type {
  UserArrayBody,
  User,
  LoginUserParams,
} from '../swaggerPetstore.schemas';
import {
  customAxiosInstance,
  ErrorType,
  BodyType,
} from '../../../helpers/axiosService';

export type AwaitedInput<T> = PromiseLike<T> | T;

export type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary Creates list of users with given input array
 */
export const createUsersWithArrayInput = (userArrayBody: UserArrayBody) => {
  return customAxiosInstance<unknown>({
    url: `/user/createWithArray`,
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    data: userArrayBody,
  });
};
/**
 * @summary Creates list of users with given input array
 */
export const createUsersWithListInput = (userArrayBody: UserArrayBody) => {
  return customAxiosInstance<unknown>({
    url: `/user/createWithList`,
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    data: userArrayBody,
  });
};
/**
 * @summary Get user by user name
 */
export const getUserByName = (username: string, signal?: AbortSignal) => {
  return customAxiosInstance<User>({
    url: `/user/${username}`,
    method: 'get',
    signal,
  });
};
/**
 * This can only be done by the logged in user.
 * @summary Updated user
 */
export const updateUser = (username: string, user: User) => {
  return customAxiosInstance<unknown>({
    url: `/user/${username}`,
    method: 'put',
    headers: {'Content-Type': 'application/json'},
    data: user,
  });
};
/**
 * This can only be done by the logged in user.
 * @summary Delete user
 */
export const deleteUser = (username: string) => {
  return customAxiosInstance<unknown>({
    url: `/user/${username}`,
    method: 'delete',
  });
};
/**
 * @summary Logs user into the system
 */
export const loginUser = (params?: LoginUserParams, signal?: AbortSignal) => {
  return customAxiosInstance<string>({
    url: `/user/login`,
    method: 'get',
    signal,
    params,
  });
};
/**
 * @summary Logs out current logged in user session
 */
export const logoutUser = (signal?: AbortSignal) => {
  return customAxiosInstance<unknown>({
    url: `/user/logout`,
    method: 'get',
    signal,
  });
};
/**
 * This can only be done by the logged in user.
 * @summary Create user
 */
export const createUser = (user: User) => {
  return customAxiosInstance<unknown>({
    url: `/user`,
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    data: user,
  });
};
export type CreateUsersWithArrayInputResult = NonNullable<
  Awaited<ReturnType<typeof createUsersWithArrayInput>>
>;
export type CreateUsersWithListInputResult = NonNullable<
  Awaited<ReturnType<typeof createUsersWithListInput>>
>;
export type GetUserByNameResult = NonNullable<
  Awaited<ReturnType<typeof getUserByName>>
>;
export type UpdateUserResult = NonNullable<
  Awaited<ReturnType<typeof updateUser>>
>;
export type DeleteUserResult = NonNullable<
  Awaited<ReturnType<typeof deleteUser>>
>;
export type LoginUserResult = NonNullable<
  Awaited<ReturnType<typeof loginUser>>
>;
export type LogoutUserResult = NonNullable<
  Awaited<ReturnType<typeof logoutUser>>
>;
export type CreateUserResult = NonNullable<
  Awaited<ReturnType<typeof createUser>>
>;
