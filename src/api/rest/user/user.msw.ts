/**
 * Generated by orval
 * Do not edit manually.
 */
import {rest} from 'msw';
import {faker} from '@faker-js/faker';

export const getGetUserByNameMock = () => ({
  id: faker.random.arrayElement([faker.datatype.number(), undefined]),
  username: faker.random.arrayElement([faker.random.word(), undefined]),
  firstName: faker.random.arrayElement([faker.random.word(), undefined]),
  lastName: faker.random.arrayElement([faker.random.word(), undefined]),
  email: faker.random.arrayElement([faker.random.word(), undefined]),
  password: faker.random.arrayElement([faker.random.word(), undefined]),
  phone: faker.random.arrayElement([faker.random.word(), undefined]),
  userStatus: faker.random.arrayElement([faker.datatype.number(), undefined]),
});

export const getLoginUserMock = () => faker.random.word();

export const getUserMSW = () => [
  rest.post('*/user/createWithArray', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.post('*/user/createWithList', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/user/:username', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGetUserByNameMock()),
    );
  }),
  rest.put('*/user/:username', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.delete('*/user/:username', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/user/login', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getLoginUserMock()),
    );
  }),
  rest.get('*/user/logout', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.post('*/user', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
];
