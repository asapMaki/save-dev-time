/**
 * Generated by orval
 * Do not edit manually.
 */
import type {Order, GetInventory200} from '../swaggerPetstore.schemas';
import {
  customAxiosInstance,
  ErrorType,
  BodyType,
} from '../../../helpers/axiosService';

export type AwaitedInput<T> = PromiseLike<T> | T;

export type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary Place an order for a pet
 */
export const placeOrder = (order: Order) => {
  return customAxiosInstance<Order>({
    url: `/store/order`,
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    data: order,
  });
};
/**
 * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
 * @summary Find purchase order by ID
 */
export const getOrderById = (orderId: number, signal?: AbortSignal) => {
  return customAxiosInstance<Order>({
    url: `/store/order/${orderId}`,
    method: 'get',
    signal,
  });
};
/**
 * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
 * @summary Delete purchase order by ID
 */
export const deleteOrder = (orderId: number) => {
  return customAxiosInstance<unknown>({
    url: `/store/order/${orderId}`,
    method: 'delete',
  });
};
/**
 * Returns a map of status codes to quantities
 * @summary Returns pet inventories by status
 */
export const getInventory = (signal?: AbortSignal) => {
  return customAxiosInstance<GetInventory200>({
    url: `/store/inventory`,
    method: 'get',
    signal,
  });
};
export type PlaceOrderResult = NonNullable<
  Awaited<ReturnType<typeof placeOrder>>
>;
export type GetOrderByIdResult = NonNullable<
  Awaited<ReturnType<typeof getOrderById>>
>;
export type DeleteOrderResult = NonNullable<
  Awaited<ReturnType<typeof deleteOrder>>
>;
export type GetInventoryResult = NonNullable<
  Awaited<ReturnType<typeof getInventory>>
>;
