/**
 * Generated by orval
 * Do not edit manually.
 */
import {rest} from 'msw';
import {faker} from '@faker-js/faker';

export const getPlaceOrderMock = () => ({
  id: faker.random.arrayElement([faker.datatype.number(), undefined]),
  petId: faker.random.arrayElement([faker.datatype.number(), undefined]),
  quantity: faker.random.arrayElement([faker.datatype.number(), undefined]),
  shipDate: faker.random.arrayElement([faker.random.word(), undefined]),
  status: faker.random.arrayElement([
    faker.random.arrayElement(['placed', 'approved', 'delivered']),
    undefined,
  ]),
  complete: faker.random.arrayElement([faker.datatype.boolean(), undefined]),
});

export const getGetOrderByIdMock = () => ({
  id: faker.random.arrayElement([faker.datatype.number(), undefined]),
  petId: faker.random.arrayElement([faker.datatype.number(), undefined]),
  quantity: faker.random.arrayElement([faker.datatype.number(), undefined]),
  shipDate: faker.random.arrayElement([faker.random.word(), undefined]),
  status: faker.random.arrayElement([
    faker.random.arrayElement(['placed', 'approved', 'delivered']),
    undefined,
  ]),
  complete: faker.random.arrayElement([faker.datatype.boolean(), undefined]),
});

export const getGetInventoryMock = () => ({
  cl3beyruv000006updyc7e7wy: faker.datatype.number(),
});

export const getStoreMSW = () => [
  rest.post('*/store/order', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getPlaceOrderMock()),
    );
  }),
  rest.get('*/store/order/:orderId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGetOrderByIdMock()),
    );
  }),
  rest.delete('*/store/order/:orderId', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/store/inventory', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGetInventoryMock()),
    );
  }),
];
